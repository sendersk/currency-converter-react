{"version":3,"sources":["background.jpg","App/Form/Result/styled.js","App/Form/Result/index.js","App/Form/styled.js","App/Form/index.js","App/Form/useRatesData.js","App/Clock/styled.js","App/Clock/index.js","App/Clock/useCurrentDate.js","App/styled.js","App/themeSlice.js","App/SwitchTheme/styled.js","App/SwitchTheme/index.js","theme.js","App/index.js","serviceWorker.js","GlobalStyle.js","store.js","index.js"],"names":["module","exports","Wrapper","styled","p","theme","color","mainColor","Result","result","undefined","sourceAmount","toFixed","targetAmount","currency","LabelText","span","labelColor","Field","input","border","Button","button","buttonColor","Header","h1","Info","infoColor","Link","a","linkColor","Loading","Failure","errorColor","Form","useState","setResult","ratesData","state","setRatesData","useEffect","setTimeout","fetch","response","ok","Error","statusText","json","rates","date","useRatesData","setCurrency","amount","setAmount","onSubmit","event","preventDefault","rate","calculateResult","value","onChange","target","placeholder","type","required","step","as","Object","keys","map","key","variant","severity","href","rel","div","Clock","Date","setDate","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","weekday","hour","minute","second","day","month","formatDate","formBackground","shadow","themeSlice","createSlice","name","initialState","darkTheme","JSON","parse","localStorage","getItem","reducers","toggleTheme","actions","selectDarkTheme","SwitchTheme","isDarkTheme","useSelector","dispatch","useDispatch","onClick","field","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","background","store","configureStore","reducer","themeReducer","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d93b04d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.26d1fafc.jpg\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.p`\r\n    color: ${({ theme }) => theme.color.mainColor};\r\n    text-align: center;\r\n    font-size: 22px;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport const Result = ({ result }) => (\r\n    <Wrapper>\r\n        {result !== undefined && (\r\n            <>\r\n                {result.sourceAmount.toFixed(2)}&nbsp;PLN&nbsp;=&nbsp;\r\n                <strong>\r\n                    {result.targetAmount.toFixed(2)}&nbsp;{result.currency}\r\n                </strong>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const LabelText = styled.span`\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: inline-block;\r\n    margin-right: 5px;\r\n    color: ${({theme}) => theme.color.labelColor};\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const Field = styled.input`\r\n    border: 2px solid ${({ theme }) => theme.color.border};\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    max-width: 350px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    font-size: 16px;\r\n    font-weight: 700;\r\n    width: 100%;\r\n    color: ${({ theme }) => theme.color.buttonColor};\r\n    background-color: ${({ theme }) => theme.color.mainColor};\r\n    border-radius: 15px;\r\n    border: none;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Header = styled.h1`\r\n    font-size: 40px;\r\n    font-weight: 700;\r\n    color: ${({ theme }) => theme.color.mainColor};\r\n    border-radius: 15px;\r\n    border: none;\r\n    padding: 5px;\r\n`;\r\n\r\nexport const Info = styled.p`\r\n    text-align: center;\r\n    color: ${({ theme }) => theme.color.infoColor};\r\n`;\r\n\r\nexport const Link = styled.a`\r\n    text-decoration: none;\r\n    color: ${({theme}) => theme.color.linkColor};\r\n    font-weight: bold;\r\n    font-style: italic;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Loading = styled.p`\r\n    color: ${({ theme }) => theme.color.mainColor};\r\n`;\r\n\r\nexport const Failure = styled.p`\r\n    color: ${({ theme }) => theme.color.errorColor};\r\n`;","import React, { useState } from \"react\";\r\nimport { Result } from \"./Result\";\r\nimport {\r\n  Button,\r\n  Field,\r\n  Header,\r\n  Info,\r\n  Link,\r\n  LabelText,\r\n  Loading,\r\n  Failure,\r\n} from \"./styled\";\r\nimport { useRatesData } from \"./useRatesData\";\r\n\r\nexport const Form = () => {\r\n  const [result, setResult] = useState();\r\n  const ratesData = useRatesData();\r\n\r\n  const calculateResult = (currency, amount) => {\r\n    const rate = ratesData.rates[currency];\r\n\r\n    setResult({\r\n      sourceAmount: +amount,\r\n      targetAmount: amount * rate,\r\n      currency,\r\n    });\r\n  };\r\n\r\n  const [currency, setCurrency] = useState(\"EUR\");\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(currency, amount);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Header>Currency converter</Header>\r\n      {ratesData.state === \"loading\" ? (\r\n        <Loading>\r\n          Loading...\r\n          <br />\r\n          Please wait. Exchange rates are currently loading from European Central Bank. \r\n        </Loading>\r\n      ) : (\r\n        ratesData.state === \"error\" ? (\r\n          <Failure>\r\n            Unable receive data. Try again later.\r\n          </Failure>\r\n        ) : (\r\n          <>\r\n            <p>\r\n              <label>\r\n                <LabelText>Amount:</LabelText>\r\n                <Field\r\n                  value={amount}\r\n                  onChange={({ target }) => setAmount(target.value)}\r\n                  placeholder=\"Please enter amount in PLN\"\r\n                  type=\"number\"\r\n                  required\r\n                  step=\"0.01\"\r\n                />\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>\r\n                <LabelText>Currency:</LabelText>\r\n                <Field\r\n                  as=\"select\"\r\n                  value={currency}\r\n                  onChange={({ target }) => setCurrency(target.value)}\r\n                >\r\n                  {Object.keys(ratesData.rates).map((currency) => (\r\n                    <option key={currency} value={currency}>\r\n                      {currency}\r\n                    </option>\r\n                  ))}\r\n                </Field>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <Button>Result</Button>\r\n            </p>\r\n            <Info variant=\"outlined\" severity=\"info\">\r\n              Exchange rates imported from \r\n              {\" \"}\r\n              <Link\r\n                href=\"https://exchangeratesapi.io/\"\r\n                target=\"__blank\" rel=\"noopener noreferrer\">\r\n                  https://exchangeratesapi.io/\r\n              </Link> based on data published by the \r\n              {\" \"}\r\n              <Link \r\n                href=\"https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html\"\r\n                target=\"__blank\" rel=\"noopener noreferrer\">\r\n                  European Central Bank\r\n              </Link>\r\n              {\" \"}\r\n              from: \r\n              <strong> {ratesData.date}</strong>\r\n            </Info>\r\n            <Result result={result} />\r\n          </>\r\n        )\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useRatesData = () => {\r\n    const [ratesData, setRatesData] = useState({\r\n        state: \"loading\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchRates = async () => {\r\n            try {\r\n                const response = await fetch(\"https://api.exchangeratesapi.io/latest?base=PLN\");\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const { rates, date } = await response.json();\r\n\r\n                setRatesData({\r\n                    state: \"success\",\r\n                    rates,\r\n                    date,\r\n                });\r\n            } catch {\r\n                setRatesData({\r\n                    state: \"error\",\r\n                });\r\n            }\r\n        };\r\n\r\n        setTimeout(fetchRates, 1000);\r\n    }, []);\r\n\r\n    return ratesData;\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    text-align: right;\r\n    font-family: monospace;\r\n    color: ${({ theme }) => theme.color.infoColor};\r\n`;","import React from \"react\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst formatDate = (date) => date.toLocaleString(\"en-EN\", {\r\n    weekday: \"long\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    day: \"numeric\",\r\n    month: \"long\"\r\n});\r\n\r\nexport const Clock = () => {\r\n    const date = useCurrentDate();\r\n    \r\n    return (\r\n        <Wrapper>\r\n            Today is\r\n            {\" \"}\r\n            {formatDate(date)}\r\n        </Wrapper>\r\n    )\r\n};","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, []);\r\n\r\n    return date;\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    flex-basis: 700px;\r\n    margin: 20px;\r\n    padding: 40px;\r\n    background: ${({theme}) => theme.color.formBackground};\r\n    border-radius: 20px;\r\n    box-shadow: 0 0 30px ${({ theme }) => theme.color.shadow};; \r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        darkTheme: JSON.parse(localStorage.getItem(\"theme\")) || false,\r\n    },\r\n    reducers: {\r\n        toggleTheme: (state) => {\r\n            state.darkTheme = !state.darkTheme;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\nexport const selectDarkTheme = state => state.theme.darkTheme;\r\nexport default themeSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: ${({theme}) => theme.color.mainColor};\r\n    color: ${({theme}) => theme.color.buttonColor};\r\n    font-size: 20px;\r\n    padding: 15px;\r\n    border-radius: 20px;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { toggleTheme, selectDarkTheme } from \"../themeSlice\";\r\nimport { Button } from \"./styled\";\r\n\r\nexport const SwitchTheme = () => {\r\n    const isDarkTheme = useSelector(selectDarkTheme);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Button onClick={() => dispatch(toggleTheme())}>\r\n            {isDarkTheme ? \"Light theme\" : \"Dark theme\"}\r\n        </Button>\r\n    )\r\n}","export const theme = {\r\n    color: {\r\n        shadow: \"#000\",\r\n        infoColor: \"#555\",\r\n        buttonColor: \"#fff\",\r\n        field: \"#daad86\",\r\n        mainColor: \"#4c74ee\",\r\n        errorColor: \"#db143c\",\r\n        linkColor: \"#3f50b5\",\r\n        formBackground: \"rgba(255,255,255,0.7)\",\r\n        labelColor: \"#000\",\r\n    },\r\n};\r\n\r\nexport const darkTheme = {\r\n    color: {\r\n        shadow: \"#fff\",\r\n        infoColor: \"#ccc\",\r\n        buttonColor: \"#000\",\r\n        field: \"#0f4c75\",\r\n        mainColor: \"#bbe1fa\",\r\n        errorColor: \"#db143c\",\r\n        linkColor: \"#f2a365\",\r\n        formBackground: \"rgb(27, 38, 44, 0.7)\",\r\n        labelColor: \"#f2a07b\",\r\n    },\r\n};","import React from \"react\";\nimport { Form } from \"./Form\";\nimport { Clock } from \"./Clock\";\nimport { Wrapper } from \"./styled\";\nimport { SwitchTheme } from \"./SwitchTheme\";\nimport { theme, darkTheme } from \"../theme\";\nimport { ThemeProvider } from 'styled-components';\nimport { useSelector } from \"react-redux\";\nimport { selectDarkTheme } from \"./themeSlice\";\n\nfunction App() {\n  const isDarkTheme = useSelector(selectDarkTheme);\n\n  return (\n    <ThemeProvider theme={isDarkTheme ? darkTheme : theme}>\n      <Wrapper>\n        <SwitchTheme />\n        <Clock />\n        <Form />\n      </Wrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\r\nimport background from \"./background.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    #root {\r\n        font-family: 'Montserrat', sans-serif;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        min-height: 100vh;\r\n        background-image: url(\"${background}\");\r\n        background-size: cover;\r\n        background-position: center;\r\n    }\r\n`;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport themeReducer from \"./App/themeSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    theme: themeReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\r\n    \"theme\",\r\n    JSON.stringify(store.getState().theme.darkTheme)\r\n  );\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <GlobalStyle />\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}