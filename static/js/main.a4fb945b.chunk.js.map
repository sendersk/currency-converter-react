{"version":3,"sources":["GlobalStyle.js","App/currencies.js","App/Form/Result/styled.js","App/Form/Result/index.js","App/Form/styled.js","App/Form/index.js","App/Clock/styled.js","App/Clock/index.js","App/Clock/useCurrentDate.js","App/styled.js","App/index.js","serviceWorker.js","index.js","theme.js","background.jpg"],"names":["GlobalStyle","createGlobalStyle","background","currencies","short","name","rate","Wrapper","styled","p","theme","color","royalBlue","Result","result","undefined","sourceAmount","toFixed","targetAmount","currency","LabelText","span","Field","input","tumbleweed","Button","button","white","Header","h1","Info","emperor","Form","calculateResult","useState","setCurrency","amount","setAmount","onSubmit","event","preventDefault","value","onChange","target","placeholder","type","required","step","as","map","key","div","Clock","date","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","weekday","hour","minute","second","day","month","formatDate","black","App","setResult","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","silver","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.a4fb945b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\nimport background from \"./background.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    #root {\r\n        font-family: 'Montserrat', sans-serif;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        min-height: 100vh;\r\n        background-image: url(\"${background}\");\r\n        background-size: cover;\r\n        background-position: center;\r\n    }\r\n`;","export const currencies = [\r\n    {\r\n        short: \"USD\",\r\n        name: \"Dolar amerykański\",\r\n        rate: 3.6924,\r\n    },\r\n    {\r\n        short: \"EUR\",\r\n        name: \"Euro\",\r\n        rate: 4.3969,\r\n    },\r\n    {\r\n        short: \"GBP\",\r\n        name: \"Funt brytyjski\",\r\n        rate: 4.9166,\r\n    },\r\n];","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.p`\r\n    color: ${({ theme }) => theme.color.royalBlue};\r\n    text-align: center;\r\n    font-size: 22px;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport const Result = ({ result }) => (\r\n    <Wrapper>\r\n        {result !== undefined && (\r\n            <>\r\n                {result.sourceAmount.toFixed(2)}&nbsp;PLN&nbsp;=&nbsp;\r\n                <strong>\r\n                    {result.targetAmount.toFixed(2)}&nbsp;{result.currency}\r\n                </strong>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const LabelText = styled.span`\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: inline-block;\r\n    margin-right: 5px;\r\n`;\r\n\r\nexport const Field = styled.input`\r\n    border: 2px solid ${({ theme }) => theme.color.tumbleweed};\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    max-width: 350px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    font-size: 16px;\r\n    font-weight: 700;\r\n    width: 100%;\r\n    color: ${({ theme }) => theme.color.white};\r\n    background-color: ${({ theme }) => theme.color.royalBlue};\r\n    border-radius: 15px;\r\n    border: none;\r\n    padding: 10px;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Header = styled.h1`\r\n    font-size: 40px;\r\n    font-weight: 700;\r\n    color: ${({ theme }) => theme.color.royalBlue};\r\n    border-radius: 15px;\r\n    border: none;\r\n    padding: 5px;\r\n`;\r\n\r\nexport const Info = styled.p`\r\n    font-size: 12px;\r\n    color: ${({ theme }) => theme.color.emperor};\r\n`;","import React, { useState } from \"react\";\r\nimport { currencies } from \"../currencies\";\r\nimport { Result } from \"./Result\";\r\nimport { Button, Field, Header, Info, LabelText } from \"./styled\";\r\n\r\nexport const Form = ({ calculateResult, result }) => {\r\n  const [currency, setCurrency] = useState(currencies[0].short);\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(currency, amount);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Header>Przelicznik walut</Header>\r\n      <p>\r\n        <label>\r\n          <LabelText>Kwota w zł*:</LabelText>\r\n          <Field\r\n            value={amount}\r\n            onChange={({ target }) => setAmount(target.value)}\r\n            placeholder=\"Wpisz kwotę w zł\"\r\n            type=\"number\"\r\n            required\r\n            step=\"0.01\"\r\n          />\r\n        </label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <LabelText>Waluta:</LabelText>\r\n          <Field\r\n            as=\"select\"\r\n            value={currency}\r\n            onChange={({ target }) => setCurrency(target.value)}\r\n          >\r\n            {currencies.map((currency) => (\r\n              <option key={currency.short} value={currency.short}>\r\n                {currency.name}\r\n              </option>\r\n            ))}\r\n          </Field>\r\n        </label>\r\n      </p>\r\n      <p>\r\n        <Button>Przelicz!</Button>\r\n      </p>\r\n      <Info>\r\n        Kursy pochodzą ze strony nbp.pl z Tabeli nr 169/A/NBP/2020 z dnia 2020-08-31\r\n      </Info>\r\n      <Result result={result} />\r\n    </form>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    text-align: right;\r\n    font-family: monospace;\r\n    color: ${({ theme }) => theme.color.emperor};\r\n`;","import React from \"react\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst formatDate = (date) => date.toLocaleString(undefined, {\r\n    weekday: \"long\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    day: \"numeric\",\r\n    month: \"long\"\r\n});\r\n\r\nexport const Clock = () => {\r\n    const date = useCurrentDate();\r\n    \r\n    return (\r\n        <Wrapper>\r\n            Dzisiaj jest\r\n            {\" \"}\r\n            {formatDate(date)}\r\n        </Wrapper>\r\n    )\r\n};","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, []);\r\n\r\n    return date;\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    flex-basis: 700px;\r\n    margin: 20px;\r\n    padding: 40px;\r\n    background: rgba(255,255,255,0.7);\r\n    border-radius: 20px;\r\n    box-shadow: 0 0 30px ${({ theme }) => theme.color.black};; \r\n`;","import React, { useState } from 'react';\nimport { Form } from \"./Form\";\nimport { Clock } from \"./Clock\";\nimport { currencies } from \"./currencies\";\nimport { Wrapper } from \"./styled\";\n\nfunction App() {\n  \n  const [result, setResult] = useState();\n\n  const calculateResult = (currency, amount) => {\n    const rate = currencies\n      .find(({ short }) => short === currency)\n      .rate;\n\n    setResult({\n      sourceAmount: +amount,\n      targetAmount: amount / rate,\n      currency,\n    });\n  }\n\n  return (\n    <Wrapper>\n      <Clock />\n      <Form \n        result={result}\n        calculateResult={calculateResult}\n      />\n    </Wrapper>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport { ThemeProvider } from 'styled-components';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        emperor: \"#555\",\r\n        silver: \"#ccc\",\r\n        white: \"#fff\",\r\n        tumbleweed: \"#daad86\",\r\n        royalBlue: \"#4c74ee\",\r\n    },\r\n};","module.exports = __webpack_public_path__ + \"static/media/background.26d1fafc.jpg\";"],"sourceRoot":""}